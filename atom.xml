<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>范羽西博客</title>
  <subtitle>范羽西个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cn.yuxifan.com/"/>
  <updated>2017-10-23T12:12:28.833Z</updated>
  <id>https://cn.yuxifan.com/</id>
  
  <author>
    <name>Yuxi</name>
    <email>cn@yuxifan.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如果在调用Steem API时设定一个执行时限</title>
    <link href="https://cn.yuxifan.com/set-timeout-while-calling-steem-api/"/>
    <id>https://cn.yuxifan.com/set-timeout-while-calling-steem-api/</id>
    <published>2017-10-23T05:40:12.000Z</published>
    <updated>2017-10-23T12:12:28.833Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一些Steem相关的程序，也遇到了一些技术方面的问题。其中一个主要问题就是由于Steem网络的不稳定，导致程序不能按时完成指定的任务。而程序又是设定的cron job，比如：每5分钟就会自动执行一次。那么如果上一次程序因为Steem网络问题没有结束，而下一次的运行又开始了。在极端情况下，就会有很多个进程同时运行，不仅占用更多的系统内存，而且也为Steem区块链网络带来不必要的流量，比如：两个进程如果同时upvote同一篇文章，那么有一个其实做的就是无效工作，但却给区块链网络带来了不必要的负担。下面提供一个简单的办法来解决这个问题。核心点其实就是在调用相应的方法时，设定一个执行时限，到时候如果没有完成的话，就要强制退出。</p>
<p><img src="/images/steemit/error.jpg" alt=""></p>
<p>好了，看代码吧：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> signal</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">timeout_interval = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">steem_timeout_handler</span><span class="params">(signum, frame)</span>:</span></div><div class="line">  <span class="keyword">print</span> (<span class="string">"Cannot get response from Steem network!"</span>)</div><div class="line">  <span class="keyword">raise</span> Exception(<span class="string">"Steem network timeout"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">steem_op</span><span class="params">()</span>:</span></div><div class="line">  <span class="comment"># write your steem code here ...</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"."</span>)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">signal.signal(signal.SIGALRM, steem_timeout_handler)</div><div class="line">signal.alarm(timeout_interval)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  steem_op()</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</div><div class="line">  <span class="keyword">print</span> (ex)</div></pre></td></tr></table></figure>
<p>上面的演示程序并没有真正的调用Steem API，而是用一个循环进行了简单的模拟。运行效果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python test.py</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">Cannot get response from Steem network!</div><div class="line">Steem network timeout</div></pre></td></tr></table></figure>
<p>至此，问题已经解决，你所需要的就是设置一个对你的程序来说比较合理的timeout_interval。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一些Steem相关的程序，也遇到了一些技术方面的问题。其中一个主要问题就是由于Steem网络的不稳定，导致程序不能按时完成指定的任务。而程序又是设定的cron job，比如：每5分钟就会自动执行一次。那么如果上一次程序因为Steem网络问题没有结束，而下一次的运行又
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
      <category term="python" scheme="https://cn.yuxifan.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Download steemit images and update markdown automatically / 说说Steemit文章的备份：如何自动下载保存文章中的图片并自动更新markdown文本</title>
    <link href="https://cn.yuxifan.com/backup-steemit-posts/"/>
    <id>https://cn.yuxifan.com/backup-steemit-posts/</id>
    <published>2017-09-06T21:40:12.000Z</published>
    <updated>2017-09-06T12:17:29.522Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we want to backup our steemit posts into our own blog/website. It is easy to backup the post text. However, it is a hard work to download all images from steemit to your web server and update image urls in the markdown manually. Here is a script to do the job automatically for you. </p>
<blockquote>
<p>相信很多老博主和羽西一样，在Steemit发布了文章后都想把文章在自己博客上做个备份。文章本身是Markdown，很容易备份，只需要复制粘贴就可以了。但文章中的配图都保存在Steem的区块链上，如果想要把图片一个一个的复制到本地，再手工更新备份下来的Markdown文本，工作量就太大了，因此，动手写了这个小程序来做这件工作。</p>
</blockquote>
<p><img src="/images/steemit/backup.jpg" alt=""></p>
<p>For example, the steemit markdown source looks like:</p>
<blockquote>
<p>比如，在Steemit中的源文件是这样的：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Paragraph 1</div><div class="line"></div><div class="line">![](https://steemitimages.com/DQmcb73AkP8hWARdtG7iTGKTst6RccxYS3YS82nmvMxneoq/image.png)</div><div class="line"></div><div class="line">Paragraph 2</div><div class="line"></div><div class="line">![](https://steemitimages.com/DQmRTtZFKEzGUCWyCEJ7jeyML9akAAGYW7c6pVB87NogZW1/image.png)</div><div class="line"></div><div class="line">Paragraph 3</div><div class="line"></div><div class="line">![](https://steemitimages.com/DQmapPpzLqGs2xAwnKSxzwzZUUqos8QAqATLiqCHdo4rfpq/image.png)</div></pre></td></tr></table></figure>
<p>After processing, the markdown looks like:</p>
<blockquote>
<p>经过程序处理后的文件是这样的（所有的图片都自动保存到了本地，并自动更新了Markdown中的图片地址）：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Paragraph 1</div><div class="line"></div><div class="line">![](/images/CFUUKPGDIGFPOTPV.png)</div><div class="line"></div><div class="line">Paragraph 2</div><div class="line"></div><div class="line">![](/images/PRMXOOVRLVXQRWNY.png)</div><div class="line"></div><div class="line">Paragraph 3</div><div class="line"></div><div class="line">![](/images/NIUUOYNTWZDFIWXO.png)</div></pre></td></tr></table></figure>
<p>The script is written in Ruby. As it is just a handy tool for myself, no exception handling in the code</p>
<blockquote>
<p>程序是用Ruby写的，由于只是自用，就没有做任何的容错处理。这里和大家分享一下。 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">require <span class="string">'open-uri'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ARGV.length != 4</div><div class="line">  puts <span class="string">'Usage: ruby backup.rb SOURCE_FILE TARGET_FILE WWW_ROOT RELATIVE_PATH'</span></div><div class="line">  puts <span class="string">'e.g. ruby backup.rb /tmp/gump.md /tmp/gump2.md /var/www/ images/'</span></div><div class="line">  <span class="built_in">exit</span></div><div class="line">end</div><div class="line"></div><div class="line">url_mappings = Hash.new</div><div class="line"></div><div class="line">source_file   = ARGV[0]</div><div class="line">target_file   = ARGV[1]</div><div class="line">www_root      = ARGV[2]</div><div class="line">relative_path = ARGV[3]</div><div class="line"></div><div class="line">s = IO.read(source_file)</div><div class="line"></div><div class="line">s.scan(/(!\[.*?\]\()(.+?)(\))/).each <span class="keyword">do</span> |a,image_url,c|</div><div class="line">  filename = (0...16).map &#123; (65 + rand(26)).chr &#125;.join + <span class="string">'.png'</span></div><div class="line">  open(www_root + relative_path + filename, <span class="string">'wb'</span>) <span class="keyword">do</span> |file|</div><div class="line">    file &lt;&lt; open(image_url).<span class="built_in">read</span></div><div class="line">  end</div><div class="line">  url_mappings[a+image_url+c] = a + <span class="string">'/'</span> + relative_path + filename + c</div><div class="line">end</div><div class="line"></div><div class="line">url_mappings.each <span class="keyword">do</span> |old, new|</div><div class="line">  s = s.gsub(old, new)</div><div class="line">end</div><div class="line"></div><div class="line">File.open(target_file, <span class="string">'w'</span>) &#123;|f| f.write(s) &#125;</div></pre></td></tr></table></figure>
<p>To run the script, type:</p>
<blockquote>
<p>如果想要运行这个程序，只需要键入：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby backup.rb /tmp/gump.md /tmp/gump2.md /var/www/ images/</div></pre></td></tr></table></figure>
<p>The first parameter is the original markdown file name<br>The second parameter is the new markdown file name<br>The third parameter is the root path of your web server<br>The fourth parameter is the relative path for the downloaded images </p>
<blockquote>
<p>其中，<br>第一个参数是你把markdown文本保存到本地的文件名<br>第二个参数是程序进行图片下载并更新markdown图片链接后保存的文件名<br>第三个参数是你的网站本地的根目录<br>第四个参数是图片文件在网站中的相对目录</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes we want to backup our steemit posts into our own blog/website. It is easy to backup the post text. However, it is a hard work t
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
      <category term="backup" scheme="https://cn.yuxifan.com/tags/backup/"/>
    
  </entry>
  
  <entry>
    <title>Steemsql系列教程二：查询发帖信息</title>
    <link href="https://cn.yuxifan.com/steemsql-posts/"/>
    <id>https://cn.yuxifan.com/steemsql-posts/</id>
    <published>2017-08-25T05:40:12.000Z</published>
    <updated>2017-08-23T23:21:54.345Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了如何查询帐户相关的信息，接下来看看和用户发帖相关的信息。</p>
<p><img src="/images/steemit/steemsql/steemsql.png" alt=""><br>图片来源：Steemsql官网</p>
<p>查看表结构，看看里面都有什么字段：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sp_columns Comments;</div></pre></td></tr></table></figure>
<p>可以看到有很多有用的信息，比如author, title, permlink等等。</p>
<p>下面查一查我们cn区8月份帖子按照收入排序的前10名，显示它们的收入，获得投票数，作者，文章名，文章地址：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">10</span> pending_payout_value+total_payout_value <span class="keyword">as</span> payout, net_votes, author, title, permlink</div><div class="line"><span class="keyword">from</span> Comments </div><div class="line"><span class="keyword">where</span> <span class="keyword">category</span>=<span class="string">'cn'</span> <span class="keyword">AND</span></div><div class="line">created &gt;= <span class="string">'2017-08-01 00:00:00'</span> <span class="keyword">AND</span></div><div class="line">created &lt;= <span class="string">'2017-08-31 23:59:59'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> pending_payout_value+total_payout_value <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<p>查询结果如下：<br><img src="/images/steemit/steemsql/02/01.jpg" alt=""></p>
<p>来看看我们cn区截至到目前为止最高产的作者：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">10</span> author, <span class="keyword">count</span>(<span class="keyword">ID</span>) <span class="keyword">as</span> posts</div><div class="line"><span class="keyword">from</span> Comments </div><div class="line"><span class="keyword">where</span> parent_permlink=<span class="string">'cn'</span> <span class="keyword">AND</span></div><div class="line">title != <span class="string">''</span> <span class="keyword">AND</span></div><div class="line">created &gt;= <span class="string">'2017-08-01 00:00:00'</span> <span class="keyword">AND</span></div><div class="line">created &lt;= <span class="string">'2017-08-31 23:59:59'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> author</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(<span class="keyword">ID</span>) <span class="keyword">desc</span>;</div></pre></td></tr></table></figure></p>
<p>查询结果如下：<br><img src="/images/steemit/steemsql/02/02.jpg" alt=""></p>
<p>按月统计一下cn区的文章数量：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">MONTH</span>(created) <span class="keyword">as</span> <span class="keyword">month</span>, <span class="keyword">count</span>(<span class="keyword">ID</span>) <span class="keyword">as</span> posts</div><div class="line"><span class="keyword">from</span> Comments </div><div class="line"><span class="keyword">where</span> parent_permlink=<span class="string">'cn'</span> <span class="keyword">AND</span></div><div class="line">title!=<span class="string">''</span> <span class="keyword">AND</span></div><div class="line">created &gt;= <span class="string">'2017-01-01 00:00:00'</span> <span class="keyword">AND</span></div><div class="line">created &lt;= <span class="string">'2017-08-31 23:59:59'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">MONTH</span>(created)</div></pre></td></tr></table></figure>
<p>查询结果如下：<br><img src="/images/steemit/steemsql/02/03.jpg" alt=""></p>
<p>可以看到，cn区自从6月份开始文章数量激增，这离不开各位Steemit好友的共同努力，加油！</p>
<p>就先举这几个例子，如果有什么需要查询的欢迎在下面留言，我们一起讨论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了如何查询帐户相关的信息，接下来看看和用户发帖相关的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/steemit/steemsql/steemsql.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图片来源：Steemsql官网&lt;/p&gt;
&lt;p&gt;查看表结构，看看里面都有什
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
      <category term="Steemsql" scheme="https://cn.yuxifan.com/tags/Steemsql/"/>
    
      <category term="posts" scheme="https://cn.yuxifan.com/tags/posts/"/>
    
  </entry>
  
  <entry>
    <title>Steemsql系列教程一：安装配置+账户篇</title>
    <link href="https://cn.yuxifan.com/steemsql-client-account/"/>
    <id>https://cn.yuxifan.com/steemsql-client-account/</id>
    <published>2017-08-23T05:40:12.000Z</published>
    <updated>2017-08-23T11:13:45.429Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一些有趣的Steem相关程序。尝试了一下Steemsql，感觉非常好用。就像 @jubi 曾经提到的一样，很多对IT技术不是很熟悉的朋友经常想要查询一些Steem的数据。因此就萌生了写一个教程的想法。这一系列教程主要是针对小白们的，欢迎大神们指正。</p>
<p><img src="/images/steemit/steemsql/steemsql.png" alt=""><br>图片来源：Steemsql官网</p>
<h2 id="安装数据库客户端工具-Install-DBeaver"><a href="#安装数据库客户端工具-Install-DBeaver" class="headerlink" title="安装数据库客户端工具(Install DBeaver)"></a>安装数据库客户端工具(Install DBeaver)</h2><p>首先需要下载微软的SQL Server JDBC驱动程序，后面要用到。<br>Download Microsoft SQL Server JDBC Driver from:<br><a href="https://www.microsoft.com/en-gb/download/details.aspx?id=11774" rel="external nofollow noopener noreferrer" target="_blank">https://www.microsoft.com/en-gb/download/details.aspx?id=11774</a></p>
<p>下载完毕后解开压缩包，会看到sqljdbc42.jar这个文件。<br>Unzip the file and you will find sqljdbc42.jar:<br><img src="/images/steemit/steemsql/05_sqljdbc_driver.png" alt=""></p>
<p>接下来安装数据库客户端工具。这样的工具有很多，这里选择DBeaver作为示范：<br>Download DBeaver:<br><a href="https://dbeaver.jkiss.org/download/" rel="external nofollow noopener noreferrer" target="_blank">https://dbeaver.jkiss.org/download/</a></p>
<p>安装完毕后，一看这个界面非常眼熟，一眼就认出来这肯定是在eclipse基础上进行的二次开发。。。</p>
<p>系统会要求你新建数据库连接。<br>After installation, you will see this window asking you to create new connection:</p>
<p><img src="/images/steemit/steemsql/01_create_new_connection.jpg" alt="新建数据库连接"></p>
<p>输入以下信息：<br>Enter the following information, e.g.<br>Host: sql.steemsql.com<br>Database/Schema: DBSteem<br>User name: steemit<br>Password: steemit</p>
<p><img src="/images/steemit/steemsql/02_new_connection.png" alt=""></p>
<p>由于还没有安装Microsoft SQL Server JDBC驱动，因此系统会报错。<br>If you haven’t installed Microsoft SQL Server JDBC Driver, as shown in the following diagram, just download it.<br><img src="/images/steemit/steemsql/03_download_driver.jpg" alt=""></p>
<p><img src="/images/steemit/steemsql/04_jdbc_driver_error.png" alt=""></p>
<p>不要紧，添加前面下载好的驱动，再测试连接，应该就没什么问题了</p>
<p>Add the driver and test connection again, you will see:<br><img src="/images/steemit/steemsql/06_connected.png" alt=""></p>
<p>运行一个测试的SQL语句：<br>Run a test query:</p>
<p><img src="/images/steemit/steemsql/07_test.png" alt=""></p>
<h2 id="查询账户相关信息"><a href="#查询账户相关信息" class="headerlink" title="查询账户相关信息"></a>查询账户相关信息</h2><p>查看表结构，看看里面都有什么数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sp_columns Accounts;</div></pre></td></tr></table></figure>
<p>看看威望值最高的20个牛人：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">20</span> <span class="keyword">name</span>, reputation, post_count, comment_count </div><div class="line"><span class="keyword">from</span> Accounts</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> reputation <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<p><img src="/images/steemit/steemsql/rep_1.jpg" alt=""></p>
<p>不过这个reputation的值和我们所看到的似乎不太一样，其实这里需要转换一下就OK了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">20</span> <span class="keyword">name</span>, <span class="keyword">cast</span>(<span class="keyword">log10</span>(reputation)*<span class="number">9</span> - <span class="number">56</span> <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">4</span>,<span class="number">2</span>)) <span class="keyword">as</span> reputation, post_count, comment_count </div><div class="line"><span class="keyword">from</span> Accounts </div><div class="line"><span class="keyword">where</span> reputation&gt;<span class="number">0</span> </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> reputation <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<p><img src="/images/steemit/steemsql/rep_2.jpg" alt=""></p>
<p>可以看到reputation值最高的各位大神们，@sweetssj 赫然也在其中。<br>竟然有rep值超过78的存在！羽西还在为rep 60而努力努力努力。。。</p>
<p>查看一下Steem中的各位土豪，这里只以账户中的SBD为例，需要注意的是sbd_balance中包含’SBD’字符，需要先去掉，然后再转换为数字才能进行正确排序：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">30</span> <span class="keyword">name</span>, sbd_balance </div><div class="line"><span class="keyword">from</span> Accounts </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">CAST</span>(<span class="keyword">REPLACE</span>(sbd_balance, <span class="string">'SBD'</span>, <span class="string">''</span>) <span class="keyword">AS</span> <span class="built_in">FLOAT</span>) <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<p><img src="/images/steemit/steemsql/sbd.jpg" alt=""></p>
<p>其实帐户表里面有用的信息还是很多的，这个大家自己去深挖吧。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一些有趣的Steem相关程序。尝试了一下Steemsql，感觉非常好用。就像 @jubi 曾经提到的一样，很多对IT技术不是很熟悉的朋友经常想要查询一些Steem的数据。因此就萌生了写一个教程的想法。这一系列教程主要是针对小白们的，欢迎大神们指正。&lt;/p&gt;
&lt;p&gt;&lt;
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
      <category term="Steemsql" scheme="https://cn.yuxifan.com/tags/Steemsql/"/>
    
      <category term="account" scheme="https://cn.yuxifan.com/tags/account/"/>
    
  </entry>
  
  <entry>
    <title>Python Steem API介绍系列#5 － steempy命令行工具篇</title>
    <link href="https://cn.yuxifan.com/python-steem-cli/"/>
    <id>https://cn.yuxifan.com/python-steem-cli/</id>
    <published>2017-08-12T05:40:12.000Z</published>
    <updated>2017-08-11T22:59:51.060Z</updated>
    
    <content type="html"><![CDATA[<p>今天来介绍一下Steem Python配套的命令行工具：steempy。有了这个工具，你不需要编程也能做很多事情了，比如：follow, upvote, transfer等操作。</p>
<p><img src="/images/steemit/python/cli.jpg" alt="Steem Python Cli"></p>
<h2 id="检查你的安装"><a href="#检查你的安装" class="headerlink" title="检查你的安装"></a>检查你的安装</h2><p>如果你按照我前面的教程安装了Steem官方的Python库，那么就可以直接使用steempy了，否则，运行下面命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install -U steem</div></pre></td></tr></table></figure>
<p>然后运行一下这个命令，看看是否安装成功：<br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy --version</div></pre></td></tr></table></figure>
<p>也可以检查一下Steem区块的信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy info</div></pre></td></tr></table></figure></p>
<p><img src="/images/steemit/python/cli-2.jpg" alt=""></p>
<p>也可以使用steempy查看某个账户的信息。最近听说 @tumutanzi 老兄被委以重任，SP大涨，这里查询一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy balance tumutanzi</div></pre></td></tr></table></figure>
<p><img src="/images/steemit/python/cli-3.jpg" alt=""></p>
<p>不过，真要顺便谢谢坛子兄的支持，啊啊，话说我也是因为喜欢你的博客才知道的Steemit。。。</p>
<h2 id="导入账户信息"><a href="#导入账户信息" class="headerlink" title="导入账户信息"></a>导入账户信息</h2><p>像前面的操作不需要导入你的Steem账户信息也能查询，但是有的操作就不行了，比如转账，upvote等等。</p>
<p>运行下面命令来导入你的Steem账户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy importaccount yuxi</div></pre></td></tr></table></figure>
<p>需要注意的是：第一个”Account Passphrase”指的是你的Steemit登陆用的密码。而第二个”Passphrase”则是以后用来访问你的本地加密钱包的密码。以后进行顶帖，转账等操作的时候都需要这个密码。首次操作时会要求输入新密码，必须输入两次确认才行。</p>
<p><img src="/images/steemit/python/cli-4.jpg" alt=""></p>
<p>运行下面命令检查一下当前账户信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy listaccounts</div></pre></td></tr></table></figure>
<p>这是命令运行结果：</p>
<p><img src="/images/steemit/python/cli-5.jpg" alt=""></p>
<h2 id="upvote-follow操作"><a href="#upvote-follow操作" class="headerlink" title="upvote,follow操作"></a>upvote,follow操作</h2><p>使用steempy进行upvote就非常简单了，比如：正好看到一个和我一样的Steemit新人 @ck-cake发了一个比较感兴趣的帖子，这里在命令行里顶一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">steempy upvote --account yuxi https://steemit.com/lovefriday/@ck-cake/lovefriday-brilliant-sea-view-in-phuket</div><div class="line">Passphrase:</div></pre></td></tr></table></figure>
<p>系统会返回：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"operations"</span>: [</div><div class="line">        [</div><div class="line">            <span class="string">"vote"</span>,</div><div class="line">            &#123;</div><div class="line">                <span class="string">"permlink"</span>: <span class="string">"lovefriday-brilliant-sea-view-in-phuket"</span>,</div><div class="line">                <span class="string">"weight"</span>: 10000,</div><div class="line">                <span class="string">"author"</span>: <span class="string">"ck-cake"</span>,</div><div class="line">                <span class="string">"voter"</span>: <span class="string">"yuxi"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    ],</div><div class="line">    <span class="string">"ref_block_num"</span>: 59268,</div><div class="line">    <span class="string">"ref_block_prefix"</span>: 2880245372,</div><div class="line">    <span class="string">"signatures"</span>: [</div><div class="line">        <span class="string">"XXXXXXXXXXXXXXXX"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"extensions"</span>: [],</div><div class="line">    <span class="string">"expiration"</span>: <span class="string">"2017-08-11T09:06:33"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面想要follow这个美女，运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy follow ck-cake</div></pre></td></tr></table></figure>
<p>看到了出错信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/home/daren/environments/myenv/bin/steempy"</span>, line 11, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sys.exit(legacy())</div><div class="line">  File <span class="string">"/home/daren/environments/myenv/lib/python3.5/site-packages/steem/cli.py"</span>, line 1406, <span class="keyword">in</span> legacy</div><div class="line">    account=args.account</div><div class="line">  File <span class="string">"/home/daren/environments/myenv/lib/python3.5/site-packages/steem/commit.py"</span>, line 1237, <span class="keyword">in</span> follow</div><div class="line">    raise ValueError(<span class="string">"You need to provide an account"</span>)</div><div class="line">ValueError: You need to provide an account</div></pre></td></tr></table></figure>
<p>其实，是因为上面的命令没有输入账户信息所致。想想如果每次都还要输入账户岂不是很烦。幸运的时steempy可以让你设置一个默认账户，以后如果不指定的话，就使用默认账户进行操作。其实这也意味着你可以在steempy中添加多个账户。每次进行操作的时候可以指定一个账户。</p>
<p>运行以下命令指定默认账户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy <span class="built_in">set</span> default_account yuxi</div></pre></td></tr></table></figure>
<p>再来follow美女账户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">steempy follow ck-cake</div><div class="line">Passphrase:</div></pre></td></tr></table></figure>
<p>输入前面设置的钱包密码后成功follow。</p>
<h2 id="转账相关操作"><a href="#转账相关操作" class="headerlink" title="转账相关操作"></a>转账相关操作</h2><p>使用steempy进行资金帐户相关的操作也是非常简单，比如：把一个SBD转换成STEEM: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">steempy convert 1</div><div class="line">Passphrase:</div></pre></td></tr></table></figure>
<p>给别的帐户转帐：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steempy transfer XXXX 0.01 SBD <span class="built_in">test</span>-steempy</div></pre></td></tr></table></figure>
<p><img src="/images/yuxi-steemit.png" alt="Yuxi @ Steemit"></p>
<p><a href="https://steemit.com" rel="external nofollow noopener noreferrer" target="_blank">https://steemit.com</a> 首发。非常感谢阅读，欢迎Follow,Resteem和Upvote <a href="https://steemit.com/@yuxi" rel="external nofollow noopener noreferrer" target="_blank">@yuxi</a> 激励我创作更多更好的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来介绍一下Steem Python配套的命令行工具：steempy。有了这个工具，你不需要编程也能做很多事情了，比如：follow, upvote, transfer等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/steemit/python/cli.jpg
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
  </entry>
  
  <entry>
    <title>Python Steem API介绍系列#4 - 转账操作篇</title>
    <link href="https://cn.yuxifan.com/python-steem-api-transfers/"/>
    <id>https://cn.yuxifan.com/python-steem-api-transfers/</id>
    <published>2017-08-08T13:00:12.000Z</published>
    <updated>2017-08-08T12:48:07.470Z</updated>
    
    <content type="html"><![CDATA[<p>今天来说说如何使用Python API进行账户相关的操作。和帐户操作相关的方法都封装在了Commit这个类中，大家可以参考这个类的<a href="https://github.com/steemit/steem-python/blob/master/steem/commit.py" rel="external nofollow noopener noreferrer" target="_blank">源代码</a>。</p>
<p><img src="/images/steemit/python/transfer.png" alt=""></p>
<h2 id="进行转账操作"><a href="#进行转账操作" class="headerlink" title="进行转账操作"></a>进行转账操作</h2><p>要想进行转账操作，前面提到的POSTING key就不行了，这里需要获取另外一个key，也就是”Active key”，同样，点”Wallet” -&gt; ”Permissions”，就会看到Active key，不是系统默认显示的key，点“LOGIN TO SHOW”，登陆后就可以看到一个以数字5开头的密码了。</p>
<p><img src="/images/steemit/python/active-key.jpg" alt=""></p>
<p>有了这个key，就可以进行转账操作了。下面首先来调戏一下booster这个机器人，它和randowhale类似，你转钱给它，它就会Upvote你。下面用前面发过的测试贴来验证一下booster的upvote是不是够给力。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> steem <span class="keyword">import</span> Steem</div><div class="line"></div><div class="line">user = <span class="string">'yuxi'</span></div><div class="line"></div><div class="line">wif = &#123;</div><div class="line">    <span class="string">"active"</span>: <span class="string">"把你的Active key复制到这里"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">steem = Steem(keys=wif)</div><div class="line">steem.transfer(<span class="string">'booster'</span>, <span class="number">1</span> , <span class="string">'SBD'</span>, memo=<span class="string">'https://steemit.com/test/@yuxi/python-api-test'</span>, account=user)</div></pre></td></tr></table></figure>
<p>运行完毕后，查看一下，在我的history里面显示转账成功。</p>
<p><img src="/images/steemit/python/booster.jpg" alt=""></p>
<p>然后耐心的等了两个多小时，看到booser来upvote了我的帖子，因为只有它自己upvote，所以很清楚的看到它这一下upvote还挺给力，我付了1 SBD，这下upvote却带来了$1.62。</p>
<p>下面再来试试在Steem不同账号之间的转账，比如，把1 SBD转到自己的Saving账户中去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steem.transfer_to_savings(<span class="number">1</span>, <span class="string">'SBD'</span>, <span class="string">'Python API test'</span>, account=user)</div></pre></td></tr></table></figure>
<h2 id="自动Redeem收入"><a href="#自动Redeem收入" class="headerlink" title="自动Redeem收入"></a>自动Redeem收入</h2><p>我不知道大家怎么看待Steemit的这个功能，每次有收入到账了，还需要自己点下这个按钮才能真正入账。我觉得应该在用户的profile中添加一个选项，类似“Redeem automatically”，让用户自己来设置是想手工claim还是想让系统自动claim。</p>
<p><img src="/images/steemit/python/redeem.jpg" alt=""></p>
<p>Anyway，下面来看看如何使用Python API来自动claim那些到账的rewards。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> steem <span class="keyword">import</span> Steem</div><div class="line"><span class="keyword">from</span> steem.account <span class="keyword">import</span> Account</div><div class="line"></div><div class="line">user = <span class="string">'yuxi'</span></div><div class="line">account = Account(user)</div><div class="line"></div><div class="line">wif = &#123;</div><div class="line">    <span class="string">"posting"</span>: <span class="string">"将你的POSTING key复制到这里"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  steem = Steem(keys=wif)</div><div class="line"></div><div class="line">  sbd   = account.balances[<span class="string">"rewards"</span>][<span class="string">"SBD"</span>]</div><div class="line">  steem = account.balances[<span class="string">"rewards"</span>][<span class="string">"STEEM"</span>]</div><div class="line">  vests = account.balances[<span class="string">"rewards"</span>][<span class="string">"VESTS"</span>]</div><div class="line"></div><div class="line">  <span class="keyword">if</span> sbd &gt;<span class="number">0</span> <span class="keyword">or</span> steem &gt;<span class="number">0</span> <span class="keyword">or</span> vests &gt; <span class="number">0</span>:</div><div class="line">    print(<span class="string">'claiming rewards ... '</span>)</div><div class="line">    steem.claim_reward_balance(account=user)</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'nothing to claim'</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">  print(<span class="string">'oops, something not right.'</span>)</div></pre></td></tr></table></figure>
<p>接下来就可以添加一个Cron job，比如：每天的凌晨1点让系统自动执行你的这个程序，从而省去了手工claim rewards的麻烦。</p>
<h2 id="通过API进行交易的初步设想"><a href="#通过API进行交易的初步设想" class="headerlink" title="通过API进行交易的初步设想"></a>通过API进行交易的初步设想</h2><p>很多人都用过 blocktrades 的服务把SBD交易成比特币，在blocktrades的基本流程中，首先要根据你的交易信息，比如SBD -&gt; BTC以及你的比特币钱包地址来生成一个memo，然后再把交易金额转到 @blocktrades 并把memo字段填上前面获取的memo值。不知道有哪位大神用过 blocktrades.us的API，如何通过调用API来生成 memo？(How to get memo field value via blocktrades API? )  @oflyhigh @myfirst @blocktrades</p>
<p><img src="/images/steemit/python/blocktrades.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来说说如何使用Python API进行账户相关的操作。和帐户操作相关的方法都封装在了Commit这个类中，大家可以参考这个类的&lt;a href=&quot;https://github.com/steemit/steem-python/blob/master/steem/commi
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
  </entry>
  
  <entry>
    <title>Python Steem API介绍系列#3 - 发帖回复点赞篇</title>
    <link href="https://cn.yuxifan.com/python-steem-api-post-comment-upvote/"/>
    <id>https://cn.yuxifan.com/python-steem-api-post-comment-upvote/</id>
    <published>2017-08-04T19:00:12.000Z</published>
    <updated>2017-08-04T12:34:36.678Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/steemit/python/steem-upvote.png" alt=""></p>
<p>下面来说说如何使用Python Steem API进行发帖，留言，以及给帖子点赞。</p>
<p>首先，和前面介绍的读取账户信息和读取已发帖子信息不同的是，这里必须要进行验证才能进行发帖等操作。</p>
<h2 id="首先找到你的WIF"><a href="#首先找到你的WIF" class="headerlink" title="首先找到你的WIF"></a>首先找到你的WIF</h2><p>登陆你的Steemit账户后，点”Wallet” -&gt; “Permissions”，你会看到”POSTING”下面对应了一串很长的密码，不是这个，再点下”SHOW PRIVATE KEY”，你会看到一个数字5开头的密码，这就是下面操作需要的密码了。下面的发帖，留言以及Upvote等操作只需要这个POSTING密码就够了。</p>
<p><img src="/images/steemit/python/wif.png" alt=""></p>
<h2 id="创建Steem类对象"><a href="#创建Steem类对象" class="headerlink" title="创建Steem类对象"></a>创建Steem类对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> steem <span class="keyword">import</span> Steem</div><div class="line"></div><div class="line">wif = &#123;</div><div class="line">    <span class="string">"posting"</span>: <span class="string">"复制你刚才看到的密码到这里"</span></div><div class="line">&#125;</div><div class="line">steem = Steem(keys=wif)</div></pre></td></tr></table></figure>
<h2 id="发个测试帖子"><a href="#发个测试帖子" class="headerlink" title="发个测试帖子"></a>发个测试帖子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = steem.post(<span class="string">"python API test"</span>, <span class="string">"test posting"</span>, author=<span class="string">'yuxi'</span>, tags=<span class="string">"test"</span>)</div><div class="line"><span class="keyword">print</span> (p)</div></pre></td></tr></table></figure>
<p>这里需要注意帖子不要乱发喔，建议只发送到测试标签”test”下，否则可能会被大鲸踩喔。。。</p>
<h2 id="测试一下回复功能"><a href="#测试一下回复功能" class="headerlink" title="测试一下回复功能"></a>测试一下回复功能</h2><p>其实在Steem中，回复也是一个帖子，只不过比较特殊而已，回复没有标题。因此在进行回复的时候，也是用的post这个方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p = steem.post(title=<span class="string">''</span>, body=<span class="string">'test commenting'</span>, author=<span class="string">'yuxi'</span>, reply_identifier=<span class="string">'@yuxi/python-api-test'</span>)</div></pre></td></tr></table></figure>
<p>这是测试完发帖和回复后的屏幕截图：<br><img src="/images/steemit/python/post-comment-screenshot.png" alt=""></p>
<h2 id="测试一下顶帖Upvote功能"><a href="#测试一下顶帖Upvote功能" class="headerlink" title="测试一下顶帖Upvote功能"></a>测试一下顶帖Upvote功能</h2><p>正好今天看到 @peterchen145 这篇文章不错，省了我手工顶了，直接在程序中实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">steem.vote(<span class="string">'@peterchen145/yoyow-pressone'</span>, <span class="number">100.00</span>, <span class="string">'yuxi'</span>)</div></pre></td></tr></table></figure>
<p>当然你也可以撤销顶帖，把那个100.00换成负数，比如：-100.00，就会撤消你刚顶过的帖子。</p>
<h2 id="关于这些API使用的一些想法"><a href="#关于这些API使用的一些想法" class="headerlink" title="关于这些API使用的一些想法"></a>关于这些API使用的一些想法</h2><p>除了上面介绍的三种功能之外，还有很多有意思的操作，比如：设定留言的回复功能，感觉可以通过这些API实现一个类似微信公共平台的自动回复功能。如果把这些功能组合起来，很容易写出一个自动顶帖，回复，甚至发帖的机器人来。</p>
<p>但是，任何好的技术都是双刃剑，关键看你是怎样来使用。我非常赞同 @tumutanzi 在一篇文章中所说的，要用心来写作，再高级的机器人也只能是冷冰冰的机器人，也许它永远无法懂得怎样去融入一个由一个个活生生的人组成的Steemit社区。</p>
<p><img src="/images/yuxi-steemit.png" alt="Yuxi @ Steemit"></p>
<p><a href="https://steemit.com" rel="external nofollow noopener noreferrer" target="_blank">https://steemit.com</a> 首发。非常感谢阅读，欢迎FOLLOW和Upvote <a href="https://steemit.com/@yuxi" rel="external nofollow noopener noreferrer" target="_blank">@yuxi</a> 激励我创作更多更好的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/steemit/python/steem-upvote.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面来说说如何使用Python Steem API进行发帖，留言，以及给帖子点赞。&lt;/p&gt;
&lt;p&gt;首先，和前面介绍的读取账户信息和读取已发帖子
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
  </entry>
  
  <entry>
    <title>Python Steem API介绍系列#2 － 帖子读取篇</title>
    <link href="https://cn.yuxifan.com/python-steem-api-read-post/"/>
    <id>https://cn.yuxifan.com/python-steem-api-read-post/</id>
    <published>2017-08-01T19:00:12.000Z</published>
    <updated>2017-08-01T13:05:25.750Z</updated>
    
    <content type="html"><![CDATA[<p>今天来说说如何获取和帖子相关的信息，最后完成一个很实用的小程序，可以自动发送指定帐号的当日最新文章汇总到你的邮箱，可以设定为一个Cron job，这样就完全自动了。感觉Steem API越来越好玩了呢。。。</p>
<p><img src="/images/steemit/steemit.png" alt=""></p>
<p>另外，根据@oflyhigh的建议，试了一下<a href="https://github.com/steemit/steem-python" rel="external nofollow noopener noreferrer" target="_blank">Steem官方Python API</a>，感觉基本上和之前用的piston-lib一样，只是个别的类会有点不同。</p>
<h1 id="安装官方Python库"><a href="#安装官方Python库" class="headerlink" title="#  安装官方Python库"></a>#  安装官方Python库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install -U steem</div></pre></td></tr></table></figure>
<h1 id="读取用户发帖信息"><a href="#读取用户发帖信息" class="headerlink" title="#  读取用户发帖信息"></a>#  读取用户发帖信息</h1><p>这里主要用到了<a href="https://github.com/steemit/steem-python/blob/master/steem/blog.py" rel="external nofollow noopener noreferrer" target="_blank">Blog</a>和<a href="https://github.com/steemit/steem-python/blob/master/steem/post.py" rel="external nofollow noopener noreferrer" target="_blank">Post</a>两个类。详细的方法列表请参考github上的源文件和官方文档。</p>
<p>首先，导入对应的Blog类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> steem.blog <span class="keyword">import</span> Blog</div><div class="line">blog = Blog(<span class="string">"yuxi"</span>)</div></pre></td></tr></table></figure>
<p>读取最新的两篇文章：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print( blog.take(<span class="number">2</span>) )</div></pre></td></tr></table></figure>
<p>读取文章相关的信息，比如：标题，创建时间，文章链接地址，文章分类，标签，获得的upvote数量，获得奖励／预计奖励等等</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> blog.take(<span class="number">3</span>):</div><div class="line">  print(<span class="string">"created: %s"</span>    % p[<span class="string">'created'</span>])</div><div class="line">  print(<span class="string">"permlink: %s"</span>   % p[<span class="string">'permlink'</span>])</div><div class="line">  print(<span class="string">"comments: %s"</span>   % str(len(list(p.get_replies()))))</div><div class="line">  print(<span class="string">"url: %s"</span>        % p[<span class="string">'url'</span>])</div><div class="line">  print(<span class="string">"categories: %s"</span> % str(p[<span class="string">'category'</span>]))</div><div class="line">  print(<span class="string">"tags: %s"</span>       % str(p[<span class="string">'tags'</span>]))</div><div class="line">  print(<span class="string">"votes: %s"</span>      % str(p[<span class="string">'net_votes'</span>]))</div><div class="line">  print(<span class="string">"reward: %s"</span>     % str(p[<span class="string">'total_payout_value'</span>] + p[<span class="string">'pending_payout_value'</span>]))</div><div class="line">  print()</div></pre></td></tr></table></figure>
<h2 id="获取某个用户的评论信息"><a href="#获取某个用户的评论信息" class="headerlink" title="获取某个用户的评论信息"></a>获取某个用户的评论信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">comments = Blog(<span class="string">"yuxi"</span>, <span class="keyword">True</span>)</div><div class="line"><span class="keyword">print</span> (comments.take(<span class="number">2</span>))</div></pre></td></tr></table></figure>
<h2 id="自动发送感兴趣用户的当日最新帖子到指定邮箱"><a href="#自动发送感兴趣用户的当日最新帖子到指定邮箱" class="headerlink" title="自动发送感兴趣用户的当日最新帖子到指定邮箱"></a>自动发送感兴趣用户的当日最新帖子到指定邮箱</h2><p>其实有了上面的Blog和Post类，玩法就很多了，比如：可以让程序自动搜集指定用户的特定文章，再生成RSS feed放到一个web服务器上，这样就可以在RSS阅读器中阅读了，当然也可以设定一个Cron job，每天自动发送一条感兴趣文章的汇总。更多的玩法欢迎大家大开脑洞，在下面留言。</p>
<p>下面实现一下自动发送感兴趣作者的当日最新文章到指定邮箱，这里只列举了 @myfirst,  @oflyhigh, @tumutanzi三位的每日文章。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> steem.blog <span class="keyword">import</span> Blog</div><div class="line"></div><div class="line">users  = [<span class="string">"myfirst"</span>,<span class="string">"oflyhigh"</span>,”tumutanzi”]</div><div class="line"></div><div class="line"><span class="comment"># 只检查最新3篇文章，再多了我就怀疑文章的质量了，当然也许有大牛能每天创作更多文章</span></div><div class="line">number_of_posts_to_check = <span class="number">3</span></div><div class="line"></div><div class="line">host   = <span class="string">'https://steemit.com'</span></div><div class="line"></div><div class="line">content = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">  content += <span class="string">'From '</span>  + user + <span class="string">'&lt;br/&gt;'</span></div><div class="line">  content += <span class="string">'------------------&lt;br/&gt;'</span></div><div class="line">  posts = Blog(user)</div><div class="line">  <span class="keyword">for</span> p <span class="keyword">in</span> posts.take(number_of_posts_to_check):</div><div class="line">    p_date = p[<span class="string">'created'</span>]</div><div class="line">    today = datetime.today().date()</div><div class="line">    created_today = (p_date.date()==today)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> created_today == <span class="keyword">True</span>:</div><div class="line">      content += <span class="string">'&lt;a href="'</span> + host+p[<span class="string">'url'</span>]+<span class="string">'"&gt;'</span> + p[<span class="string">'title'</span>] + <span class="string">"&lt;/a&gt;&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">' Category: '</span> + str(p[<span class="string">'category'</span>]) + <span class="string">"&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">' Tags: '</span> + str(p[<span class="string">'tags'</span>]) + <span class="string">"&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">' Votes: '</span> + str(p[<span class="string">'net_votes'</span>]) + <span class="string">"&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">' Comments: '</span> + str(len(list(p.get_replies()))) + <span class="string">"&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">' Rewards: '</span> + str(p[<span class="string">'total_payout_value'</span>] + p[<span class="string">'pending_payout_value'</span>]) + <span class="string">"&lt;br/&gt;"</span></div><div class="line">      content +=  <span class="string">'&lt;br/&gt;'</span></div><div class="line"></div><div class="line">  content +=  <span class="string">'&lt;br/&gt;'</span></div><div class="line"></div><div class="line">fromaddr = <span class="string">'你的Gmail邮箱'</span></div><div class="line">toaddrs  = <span class="string">'你的接收邮箱'</span></div><div class="line">subject = <span class="string">'Daily posts: '</span> + datetime.today().strftime(<span class="string">'%Y-%m-%d'</span>)</div><div class="line">message = MIMEText(content.encode(<span class="string">'utf-8'</span>), _subtype=<span class="string">'html'</span>, _charset=<span class="string">'utf-8'</span>)</div><div class="line">message[<span class="string">'Subject'</span>] = subject</div><div class="line"></div><div class="line">username = <span class="string">'XXXXXXXX'</span></div><div class="line">password = <span class="string">'XXXXX'</span></div><div class="line">server = smtplib.SMTP(<span class="string">'smtp.gmail.com:587'</span>)</div><div class="line">server.ehlo()</div><div class="line">server.starttls()</div><div class="line">server.login(username,password)</div><div class="line">server.sendmail(fromaddr, toaddrs, message.as_string())</div><div class="line">server.quit()</div></pre></td></tr></table></figure>
<p>这是我收到的email: </p>
<p><img src="/images/steemit/python/email-received.png" alt=""></p>
<p><img src="/images/yuxi-steemit.png" alt="Yuxi @ Steemit"></p>
<p><a href="https://steemit.com" rel="external nofollow noopener noreferrer" target="_blank">https://steemit.com</a> 首发。非常感谢阅读，欢迎FOLLOW和Upvote <a href="https://steemit.com/@yuxi" rel="external nofollow noopener noreferrer" target="_blank">@yuxi</a> 激励我创作更多更好的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来说说如何获取和帖子相关的信息，最后完成一个很实用的小程序，可以自动发送指定帐号的当日最新文章汇总到你的邮箱，可以设定为一个Cron job，这样就完全自动了。感觉Steem API越来越好玩了呢。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/steemit/
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
  </entry>
  
  <entry>
    <title>Python Steem API介绍系列#1 － 账户篇</title>
    <link href="https://cn.yuxifan.com/python-steemit-api-account-management/"/>
    <id>https://cn.yuxifan.com/python-steemit-api-account-management/</id>
    <published>2017-07-31T05:40:12.000Z</published>
    <updated>2017-08-11T23:01:03.554Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/steemit/python/steem-account.png" alt=""></p>
<p>在Account这个类中封装了各种账户相关的信息，下面介绍一下如何使用，同时也讨论一下一些重要的指标，比如声望值，投票力等，也许我对用户操作对这些值的影响的理解有偏差，希望各位大佬们多多指点。</p>
<h2 id="如何使用Account类"><a href="#如何使用Account类" class="headerlink" title="如何使用Account类"></a>如何使用Account类</h2><p>首先需要<a href="/cn/@yuxi/ubuntu-16-python-steem">配置Python Steem的开发环境</a>，然后只需要导入这个类就可以使用了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> piston.account <span class="keyword">import</span> Account</div><div class="line">account = Account(<span class="string">"yuxi"</span>)</div></pre></td></tr></table></figure>
<p>至于这个类中有什么属性和方法，可以参考它的<a href="https://github.com/xeroc/piston-lib/blob/master/piston/account.py" rel="external nofollow noopener noreferrer" target="_blank">源代码</a></p>
<h2 id="获取基本账户信息"><a href="#获取基本账户信息" class="headerlink" title="获取基本账户信息"></a>获取基本账户信息</h2><p>接下来就可以查看各种相关的账户信息了，比如：</p>
<p>获取用户名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Name: %s"</span> % account.name)</div></pre></td></tr></table></figure>
<p>打印用户的profile，比如：用户名，自我介绍等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Profile: %s"</span> % account.profile)</div></pre></td></tr></table></figure>
<p>查看余额:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Balances: %s"</span> % account.balances)</div></pre></td></tr></table></figure>
<p>查看用户最近Upvote的帖子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Account votes: %s"</span> % account.get_account_votes())</div></pre></td></tr></table></figure>
<p>这个指标里面有个weight，这个应该是和Steem Power有关的，值最大，投的票就越起作用，作者获得的奖励就越多。看了一下abit大神的投票，这个weight的值大的＊吓＊死＊人＊了＊</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;'weight': 3590608, 'time': '2017-07-28T07:58:42', 'rshares': '35476665753831', 'authorperm': 'deanliu/steem-oh-the-eagle-flies-high', 'percent': 5000&#125;, </div><div class="line">&#123;'weight': 3350775, 'time': '2017-07-28T08:20:09', 'rshares': '17942256119450', 'authorperm': 'lingfei/5r552t', 'percent': 2500&#125;,</div><div class="line"> &#123;'weight': 4038783, 'time': '2017-07-28T11:04:48', 'rshares': '49749730726633', 'authorperm': 'rea/a-queen-for-the-weekend-in-the-scottish-highlands-part-iii', 'percent': 7000&#125;,</div><div class="line"> &#123;'weight': 5215056, 'time': '2017-07-28T12:03:54', 'rshares': '45672133202030', 'authorperm': 'someone/london---travel-with-me-6----susan-6-by-susanlo', 'percent': 6500&#125;</div></pre></td></tr></table></figure>
<h2 id="关于关注和粉丝"><a href="#关于关注和粉丝" class="headerlink" title="关于关注和粉丝"></a>关于关注和粉丝</h2><p>看看你的粉丝还有你都关注了谁</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">followers = account.get_followers()</div><div class="line">following = account.get_following()</div><div class="line">print(<span class="string">"Followers: %s"</span> % followers)</div><div class="line">print(<span class="string">"Following: %s"</span> % following)</div></pre></td></tr></table></figure>
<p>还可以利用Python的集合操作看看谁和你互粉了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Dual following: %s"</span> % list(set(followers).intersection(set(following))))</div></pre></td></tr></table></figure>
<h2 id="关于投票力"><a href="#关于投票力" class="headerlink" title="关于投票力"></a>关于投票力</h2><p>显示当前用户的投票力：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Voting power: %s"</span> % account.voting_power())</div></pre></td></tr></table></figure>
<p>系统显示出我的投票力是:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Voting power: <span class="number">49.47</span></div></pre></td></tr></table></figure>
<p>我接着做了一个实验，给一哥@myfirst<a href="https://steemit.com/cn/@myfirst/6qowwz-steemit" rel="external nofollow noopener noreferrer" target="_blank">这个帖子</a>投了一票，结果我的投票力涨了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Voting power: 62.32</div></pre></td></tr></table></figure>
<p>一哥的<a href="https://steemit.com/steemit/@myfirst/5byn2r-hi-morning" rel="external nofollow noopener noreferrer" target="_blank">这个帖子</a>写的也不错，再投一票。查看下投票力，竟然降了降了降了，我直接蒙圈了。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Voting power: 61.19</div></pre></td></tr></table></figure>
<p>再给O大神的<a href="https://steemit.com/photography/@oflyhigh/5mgvjb" rel="external nofollow noopener noreferrer" target="_blank">这个帖子</a>投了一票，投票力继续下降。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Voting power: 59.98</div></pre></td></tr></table></figure>
<p>问题来了：为什么第一次给一哥投票时投票力会涨，随后会一直降？Steem用户在投票的时候需要注意什么？</p>
<h2 id="关于声望值"><a href="#关于声望值" class="headerlink" title="关于声望值"></a>关于声望值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Reputation: %s"</span> % account.rep)</div></pre></td></tr></table></figure>
<p>这个声望值和你的Steem Power没有关系，和你在Steem中的行为有关，比如：发帖质量，参与讨论等有关。</p>
<p>先说到这里，欢迎大家批评指正。</p>
<p><img src="/images/yuxi-steemit.png" alt="Yuxi @ Steemit"></p>
<p><a href="https://steemit.com" rel="external nofollow noopener noreferrer" target="_blank">https://steemit.com</a> 首发。非常感谢阅读，欢迎FOLLOW和Upvote <a href="https://steemit.com/@yuxi" rel="external nofollow noopener noreferrer" target="_blank">@yuxi</a> 激励我创作更多更好的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/steemit/python/steem-account.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Account这个类中封装了各种账户相关的信息，下面介绍一下如何使用，同时也讨论一下一些重要的指标，比如声望值，投票力等，也许我对用户操作
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu 16中配置Python和Steem开发环境</title>
    <link href="https://cn.yuxifan.com/setup-python-steem-development-environment-ubuntu16/"/>
    <id>https://cn.yuxifan.com/setup-python-steem-development-environment-ubuntu16/</id>
    <published>2017-07-30T05:40:12.000Z</published>
    <updated>2017-07-31T08:04:05.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/steemit/piston/ubuntu-python-steem.png" alt="Python/Steem开发环境"></p>
<h2 id="安装Python-3"><a href="#安装Python-3" class="headerlink" title="安装Python 3"></a>安装Python 3</h2><p>在Ubuntu 16中Python 2和Python 3都是已经默认安装了，只需要更新一下系统，确保升级到最新版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get -y upgrade</div></pre></td></tr></table></figure>
<p>验证一下Python版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -v</div></pre></td></tr></table></figure>
<p>还需要安装Python中的组件管理工具pip：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y python3-pip</div></pre></td></tr></table></figure>
<p>安装基本的软件开发包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential libffi-dev libssl-dev python3-dev</div></pre></td></tr></table></figure>
<h2 id="设定虚拟运行环境"><a href="#设定虚拟运行环境" class="headerlink" title="设定虚拟运行环境"></a>设定虚拟运行环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3-venv</div><div class="line">mkdir environments</div><div class="line"><span class="built_in">cd</span> environments</div><div class="line">python3 -m venv myenv</div><div class="line"><span class="built_in">source</span> myenv/bin/activate</div></pre></td></tr></table></figure>
<h2 id="安装进行Steem开发需要的软件库"><a href="#安装进行Steem开发需要的软件库" class="headerlink" title="安装进行Steem开发需要的软件库"></a>安装进行Steem开发需要的软件库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip3 install wheel </div><div class="line">pip3 install piston-lib</div><div class="line">pip3 install steem</div></pre></td></tr></table></figure>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>下面写了一段小程序，实时输出最新发表文章采用的标签：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> piston <span class="keyword">import</span> Steem</div><div class="line">steem = Steem()</div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> steem.stream_comments():</div><div class="line">  <span class="keyword">if</span> c.is_main_post():</div><div class="line">    <span class="keyword">print</span> (c.meta[<span class="string">"tags"</span>])</div></pre></td></tr></table></figure>
<p><img src="/images/yuxi-steemit.png" alt="Yuxi @ Steemit"></p>
<p><a href="https://steemit.com" rel="external nofollow noopener noreferrer" target="_blank">https://steemit.com</a> 首发。非常感谢阅读，欢迎FOLLOW和Upvote <a href="https://steemit.com/@yuxi" rel="external nofollow noopener noreferrer" target="_blank">@yuxi</a> 激励我创作更多更好的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/steemit/piston/ubuntu-python-steem.png&quot; alt=&quot;Python/Steem开发环境&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Python-3&quot;&gt;&lt;a href=&quot;#安装Python-3&quot; class=&quot;he
    
    </summary>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/categories/Steemit/"/>
    
    
      <category term="Python" scheme="https://cn.yuxifan.com/tags/Python/"/>
    
      <category term="Steem" scheme="https://cn.yuxifan.com/tags/Steem/"/>
    
      <category term="Steemit" scheme="https://cn.yuxifan.com/tags/Steemit/"/>
    
      <category term="Ubuntu" scheme="https://cn.yuxifan.com/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
