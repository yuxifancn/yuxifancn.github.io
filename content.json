{"meta":{"title":"范羽西博客","subtitle":"范羽西个人博客","description":"分享羽西的技术文章，游记等等","author":"Yuxi","url":"https://cn.yuxifan.com"},"pages":[],"posts":[{"title":"Python Steem API介绍系列#4 - 转账操作篇","slug":"python-steem-api-transfers","date":"2017-08-07T05:00:12.000Z","updated":"2017-08-07T13:02:55.837Z","comments":true,"path":"python-steem-api-transfers/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-transfers/","excerpt":"","text":"今天来说说如何使用Python API进行账户相关的操作。主要是使用的方法都封装在了Commit这个类中，大家可以参考这个来的源代码。 进行转账操作要想进行转账操作，前面提到的POSTING key就不行了，这里需要获取另外一个key，也就是”Active key”，同样，点”Wallet” -&gt; ”Permissions”，就会看到Active key，不是系统默认显示的这个，点“Login to see private key”，登陆后就可以看到一个以数字5开头的密码了。 有了这个key，就可以进行转账操作了。下面首先来调戏一下booster这个机器人，它和randowhale类似，你转钱给它，它就会Upvote你。下面用前面发过的测试贴来验证一下booster的upvote是不是够给力。 12345678910from steem import Steemuser = 'yuxi'wif = &#123; \"active\": \"把你的Active key复制到这里\"&#125;steem = Steem(keys=wif)steem.transfer('booster', 1 , 'SBD', memo='https://steemit.com/test/@yuxi/python-api-test', account=user) 运行完毕后，查看一下，在我的history里面显示转账成功。 然后耐心的等了两个多小时，看到booser来upvote了我的帖子，因为只有它自己upvote，所以很清楚的看到它这一下upvote还挺给力，我付了1 SBD，这下upvote却带来了$1.62。 下面再来试试在Steem不同账号之间的转账，比如，把1 SBD转到自己的Saving账户中去： 1steem.transfer_to_savings(1, 'SBD', 'Python API test', account=user) 自动Redeem收入我不知道大家怎么看待Steemit的这个功能，每次有收入到账了，还需要自己点下这个按钮才能真正入账。我觉得应该在用户的profile中添加一个选项，类似“Redeem automatically”，让用户自己来设置是想手工claim还是想让系统自动claim。 Anyway，下面来看看如何使用Python API来自动claim那些到账的rewards。 123456789101112131415161718192021222324from steem import Steemfrom steem.account import Accountuser = 'yuxi'account = Account(user)wif = &#123; \"posting\": \"将你的POSTING key复制到这里\"&#125;try: steem = Steem(keys=wif) sbd = account.balances[\"rewards\"][\"SBD\"] steem = account.balances[\"rewards\"][\"STEEM\"] vests = account.balances[\"rewards\"][\"VESTS\"] if sbd &gt;0 or steem &gt;0 or vests &gt; 0: print('claiming rewards ... ') steem.claim_reward_balance(account=user) else: print('nothing to claim')except: print('oops, something not right.') 接下来就可以添加一个Cron job，比如：每天的凌晨1点让系统自动执行你的这个程序，从而省去了手工claim rewards的麻烦。 通过API进行交易的初步设想很多人都用过 blocktrades 的服务把SBD交易成比特币，在blocktrades的基本流程中，首先要根据你的交易信息，比如SBD -&gt; BTC以及你的比特币钱包地址来生成一个memo，然后再把交易金额转到 @blocktrades 并把memo字段填上前面获取的memo值。不知道有哪位大神用过 blocktrades.us的API，如何通过调用API来生成 memo？(How to get memo field value via blocktrades API? ) @oflyhigh @myfirst @blocktrades","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#4 - 转账操作篇"},{"title":"Python Steem API介绍系列#3 - 发帖回复点赞篇","slug":"python-steem-api-post-comment-upvote","date":"2017-08-04T19:00:12.000Z","updated":"2017-08-04T12:34:36.678Z","comments":true,"path":"python-steem-api-post-comment-upvote/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-post-comment-upvote/","excerpt":"","text":"下面来说说如何使用Python Steem API进行发帖，留言，以及给帖子点赞。 首先，和前面介绍的读取账户信息和读取已发帖子信息不同的是，这里必须要进行验证才能进行发帖等操作。 首先找到你的WIF登陆你的Steemit账户后，点”Wallet” -&gt; “Permissions”，你会看到”POSTING”下面对应了一串很长的密码，不是这个，再点下”SHOW PRIVATE KEY”，你会看到一个数字5开头的密码，这就是下面操作需要的密码了。下面的发帖，留言以及Upvote等操作只需要这个POSTING密码就够了。 创建Steem类对象123456from steem import Steemwif = &#123; \"posting\": \"复制你刚才看到的密码到这里\"&#125;steem = Steem(keys=wif) 发个测试帖子12p = steem.post(\"python API test\", \"test posting\", author='yuxi', tags=\"test\")print (p) 这里需要注意帖子不要乱发喔，建议只发送到测试标签”test”下，否则可能会被大鲸踩喔。。。 测试一下回复功能其实在Steem中，回复也是一个帖子，只不过比较特殊而已，回复没有标题。因此在进行回复的时候，也是用的post这个方法： 1p = steem.post(title='', body='test commenting', author='yuxi', reply_identifier='@yuxi/python-api-test') 这是测试完发帖和回复后的屏幕截图： 测试一下顶帖Upvote功能正好今天看到 @peterchen145 这篇文章不错，省了我手工顶了，直接在程序中实现： 1steem.vote('@peterchen145/yoyow-pressone', 100.00, 'yuxi') 当然你也可以撤销顶帖，把那个100.00换成负数，比如：-100.00，就会撤消你刚顶过的帖子。 关于这些API使用的一些想法除了上面介绍的三种功能之外，还有很多有意思的操作，比如：设定留言的回复功能，感觉可以通过这些API实现一个类似微信公共平台的自动回复功能。如果把这些功能组合起来，很容易写出一个自动顶帖，回复，甚至发帖的机器人来。 但是，任何好的技术都是双刃剑，关键看你是怎样来使用。我非常赞同 @tumutanzi 在一篇文章中所说的，要用心来写作，再高级的机器人也只能是冷冰冰的机器人，也许它永远无法懂得怎样去融入一个由一个个活生生的人组成的Steemit社区。 https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#3 - 发帖回复点赞篇"},{"title":"Python Steem API介绍系列#2 － 帖子读取篇","slug":"python-steem-api-read-post","date":"2017-08-01T19:00:12.000Z","updated":"2017-08-01T13:05:25.750Z","comments":true,"path":"python-steem-api-read-post/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-read-post/","excerpt":"","text":"今天来说说如何获取和帖子相关的信息，最后完成一个很实用的小程序，可以自动发送指定帐号的当日最新文章汇总到你的邮箱，可以设定为一个Cron job，这样就完全自动了。感觉Steem API越来越好玩了呢。。。 另外，根据@oflyhigh的建议，试了一下Steem官方Python API，感觉基本上和之前用的piston-lib一样，只是个别的类会有点不同。 # 安装官方Python库1pip3 install -U steem # 读取用户发帖信息这里主要用到了Blog和Post两个类。详细的方法列表请参考github上的源文件和官方文档。 首先，导入对应的Blog类： 12from steem.blog import Blogblog = Blog(\"yuxi\") 读取最新的两篇文章： 1print( blog.take(2) ) 读取文章相关的信息，比如：标题，创建时间，文章链接地址，文章分类，标签，获得的upvote数量，获得奖励／预计奖励等等 12345678910for p in blog.take(3): print(\"created: %s\" % p['created']) print(\"permlink: %s\" % p['permlink']) print(\"comments: %s\" % str(len(list(p.get_replies())))) print(\"url: %s\" % p['url']) print(\"categories: %s\" % str(p['category'])) print(\"tags: %s\" % str(p['tags'])) print(\"votes: %s\" % str(p['net_votes'])) print(\"reward: %s\" % str(p['total_payout_value'] + p['pending_payout_value'])) print() 获取某个用户的评论信息12comments = Blog(\"yuxi\", True)print (comments.take(2)) 自动发送感兴趣用户的当日最新帖子到指定邮箱其实有了上面的Blog和Post类，玩法就很多了，比如：可以让程序自动搜集指定用户的特定文章，再生成RSS feed放到一个web服务器上，这样就可以在RSS阅读器中阅读了，当然也可以设定一个Cron job，每天自动发送一条感兴趣文章的汇总。更多的玩法欢迎大家大开脑洞，在下面留言。 下面实现一下自动发送感兴趣作者的当日最新文章到指定邮箱，这里只列举了 @myfirst, @oflyhigh, @tumutanzi三位的每日文章。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import smtplibfrom email.mime.text import MIMETextfrom datetime import datetimefrom steem.blog import Blogusers = [\"myfirst\",\"oflyhigh\",”tumutanzi”]# 只检查最新3篇文章，再多了我就怀疑文章的质量了，当然也许有大牛能每天创作更多文章number_of_posts_to_check = 3host = 'https://steemit.com'content = ''for user in users: content += 'From ' + user + '&lt;br/&gt;' content += '------------------&lt;br/&gt;' posts = Blog(user) for p in posts.take(number_of_posts_to_check): p_date = p['created'] today = datetime.today().date() created_today = (p_date.date()==today) if created_today == True: content += '&lt;a href=\"' + host+p['url']+'\"&gt;' + p['title'] + \"&lt;/a&gt;&lt;br/&gt;\" content += ' Category: ' + str(p['category']) + \"&lt;br/&gt;\" content += ' Tags: ' + str(p['tags']) + \"&lt;br/&gt;\" content += ' Votes: ' + str(p['net_votes']) + \"&lt;br/&gt;\" content += ' Comments: ' + str(len(list(p.get_replies()))) + \"&lt;br/&gt;\" content += ' Rewards: ' + str(p['total_payout_value'] + p['pending_payout_value']) + \"&lt;br/&gt;\" content += '&lt;br/&gt;' content += '&lt;br/&gt;'fromaddr = '你的Gmail邮箱'toaddrs = '你的接收邮箱'subject = 'Daily posts: ' + datetime.today().strftime('%Y-%m-%d')message = MIMEText(content.encode('utf-8'), _subtype='html', _charset='utf-8')message['Subject'] = subjectusername = 'XXXXXXXX'password = 'XXXXX'server = smtplib.SMTP('smtp.gmail.com:587')server.ehlo()server.starttls()server.login(username,password)server.sendmail(fromaddr, toaddrs, message.as_string())server.quit() 这是我收到的email: https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#2 － 帖子读取篇"},{"title":"Python piston API介绍系列#1 － 账户篇","slug":"python-steemit-api-account-management","date":"2017-07-31T05:40:12.000Z","updated":"2017-07-31T08:38:13.206Z","comments":true,"path":"python-steemit-api-account-management/","link":"","permalink":"https://cn.yuxifan.com/python-steemit-api-account-management/","excerpt":"","text":"在Account这个类中封装了各种账户相关的信息，下面介绍一下如何使用，同时也讨论一下一些重要的指标，比如声望值，投票力等，也许我对用户操作对这些值的影响的理解有偏差，希望各位大佬们多多指点。 如何使用Account类首先需要配置Python Steem的开发环境，然后只需要导入这个类就可以使用了： 12from piston.account import Accountaccount = Account(\"yuxi\") 至于这个类中有什么属性和方法，可以参考它的源代码 获取基本账户信息接下来就可以查看各种相关的账户信息了，比如： 获取用户名： 1print(\"Name: %s\" % account.name) 打印用户的profile，比如：用户名，自我介绍等。 1print(\"Profile: %s\" % account.profile) 查看余额: 1print(\"Balances: %s\" % account.balances) 查看用户最近Upvote的帖子： 1print(\"Account votes: %s\" % account.get_account_votes()) 这个指标里面有个weight，这个应该是和Steem Power有关的，值最大，投的票就越起作用，作者获得的奖励就越多。看了一下abit大神的投票，这个weight的值大的＊吓＊死＊人＊了＊ 1234&#123;'weight': 3590608, 'time': '2017-07-28T07:58:42', 'rshares': '35476665753831', 'authorperm': 'deanliu/steem-oh-the-eagle-flies-high', 'percent': 5000&#125;, &#123;'weight': 3350775, 'time': '2017-07-28T08:20:09', 'rshares': '17942256119450', 'authorperm': 'lingfei/5r552t', 'percent': 2500&#125;, &#123;'weight': 4038783, 'time': '2017-07-28T11:04:48', 'rshares': '49749730726633', 'authorperm': 'rea/a-queen-for-the-weekend-in-the-scottish-highlands-part-iii', 'percent': 7000&#125;, &#123;'weight': 5215056, 'time': '2017-07-28T12:03:54', 'rshares': '45672133202030', 'authorperm': 'someone/london---travel-with-me-6----susan-6-by-susanlo', 'percent': 6500&#125; 关于关注和粉丝看看你的粉丝还有你都关注了谁 1234followers = account.get_followers()following = account.get_following()print(\"Followers: %s\" % followers)print(\"Following: %s\" % following) 还可以利用Python的集合操作看看谁和你互粉了： 1print(\"Dual following: %s\" % list(set(followers).intersection(set(following)))) 关于投票力显示当前用户的投票力： 1print(\"Voting power: %s\" % account.voting_power()) 系统显示出我的投票力是: 1Voting power: 49.47 我接着做了一个实验，给一哥@myfirst这个帖子投了一票，结果我的投票力涨了： 1Voting power: 62.32 一哥的这个帖子写的也不错，再投一票。查看下投票力，竟然降了降了降了，我直接蒙圈了。。。 1Voting power: 61.19 再给O大神的这个帖子投了一票，投票力继续下降。 1Voting power: 59.98 问题来了：为什么第一次给一哥投票时投票力会涨，随后会一直降？Steem用户在投票的时候需要注意什么？ 关于声望值1print(\"Reputation: %s\" % account.rep) 这个声望值和你的Steem Power没有关系，和你在Steem中的行为有关，比如：发帖质量，参与讨论等有关。 先说到这里，欢迎大家批评指正。 https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python piston API系列#1 － 账户篇"},{"title":"在Ubuntu 16中配置Python和Steem开发环境","slug":"setup-python-steem-development-environment-ubuntu16","date":"2017-07-30T05:40:12.000Z","updated":"2017-07-31T08:04:05.652Z","comments":true,"path":"setup-python-steem-development-environment-ubuntu16/","link":"","permalink":"https://cn.yuxifan.com/setup-python-steem-development-environment-ubuntu16/","excerpt":"","text":"安装Python 3在Ubuntu 16中Python 2和Python 3都是已经默认安装了，只需要更新一下系统，确保升级到最新版本： 12sudo apt-get updatesudo apt-get -y upgrade 验证一下Python版本 1python -v 还需要安装Python中的组件管理工具pip： 1sudo apt-get install -y python3-pip 安装基本的软件开发包： 1sudo apt-get install build-essential libffi-dev libssl-dev python3-dev 设定虚拟运行环境12345sudo apt-get install python3-venvmkdir environmentscd environmentspython3 -m venv myenvsource myenv/bin/activate 安装进行Steem开发需要的软件库123pip3 install wheel pip3 install piston-libpip3 install steem 测试一下下面写了一段小程序，实时输出最新发表文章采用的标签： 12345from piston import Steemsteem = Steem()for c in steem.stream_comments(): if c.is_main_post(): print (c.meta[\"tags\"]) https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://cn.yuxifan.com/tags/Ubuntu/"}],"keywords":"Python和Steem开发环境"}]}