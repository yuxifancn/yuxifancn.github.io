{"meta":{"title":"范羽西博客","subtitle":"范羽西个人博客","description":"分享羽西的技术文章，游记等等","author":"Yuxi","url":"https://cn.yuxifan.com"},"pages":[{"title":"","date":"2017-09-14T14:56:23.572Z","updated":"2017-09-14T14:56:23.572Z","comments":true,"path":"404.html","permalink":"https://cn.yuxifan.com/404.html","excerpt":"","text":"对不起，您访问的页面不存在！"}],"posts":[{"title":"如果在调用Steem API时设定一个执行时限","slug":"set-timeout-while-calling-steem-api","date":"2017-10-23T05:40:12.000Z","updated":"2017-10-23T12:12:28.833Z","comments":true,"path":"set-timeout-while-calling-steem-api/","link":"","permalink":"https://cn.yuxifan.com/set-timeout-while-calling-steem-api/","excerpt":"","text":"最近在写一些Steem相关的程序，也遇到了一些技术方面的问题。其中一个主要问题就是由于Steem网络的不稳定，导致程序不能按时完成指定的任务。而程序又是设定的cron job，比如：每5分钟就会自动执行一次。那么如果上一次程序因为Steem网络问题没有结束，而下一次的运行又开始了。在极端情况下，就会有很多个进程同时运行，不仅占用更多的系统内存，而且也为Steem区块链网络带来不必要的流量，比如：两个进程如果同时upvote同一篇文章，那么有一个其实做的就是无效工作，但却给区块链网络带来了不必要的负担。下面提供一个简单的办法来解决这个问题。核心点其实就是在调用相应的方法时，设定一个执行时限，到时候如果没有完成的话，就要强制退出。 好了，看代码吧： 12345678910111213141516171819202122import signalimport timetimeout_interval = 5def steem_timeout_handler(signum, frame): print (\"Cannot get response from Steem network!\") raise Exception(\"Steem network timeout\")def steem_op(): # write your steem code here ... while True: print (\".\") time.sleep(1)signal.signal(signal.SIGALRM, steem_timeout_handler)signal.alarm(timeout_interval)try: steem_op()except Exception as ex: print (ex) 上面的演示程序并没有真正的调用Steem API，而是用一个循环进行了简单的模拟。运行效果如下： 12345678$ python test.py.....Cannot get response from Steem network!Steem network timeout 至此，问题已经解决，你所需要的就是设置一个对你的程序来说比较合理的timeout_interval。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"python","slug":"python","permalink":"https://cn.yuxifan.com/tags/python/"}],"keywords":"如果在调用Steem API时设定一个执行时限"},{"title":"Download steemit images and update markdown automatically / 说说Steemit文章的备份：如何自动下载保存文章中的图片并自动更新markdown文本","slug":"backup-steemit-posts","date":"2017-09-06T21:40:12.000Z","updated":"2017-09-06T12:17:29.522Z","comments":true,"path":"backup-steemit-posts/","link":"","permalink":"https://cn.yuxifan.com/backup-steemit-posts/","excerpt":"","text":"Sometimes we want to backup our steemit posts into our own blog/website. It is easy to backup the post text. However, it is a hard work to download all images from steemit to your web server and update image urls in the markdown manually. Here is a script to do the job automatically for you. 相信很多老博主和羽西一样，在Steemit发布了文章后都想把文章在自己博客上做个备份。文章本身是Markdown，很容易备份，只需要复制粘贴就可以了。但文章中的配图都保存在Steem的区块链上，如果想要把图片一个一个的复制到本地，再手工更新备份下来的Markdown文本，工作量就太大了，因此，动手写了这个小程序来做这件工作。 For example, the steemit markdown source looks like: 比如，在Steemit中的源文件是这样的： 1234567891011Paragraph 1![](https://steemitimages.com/DQmcb73AkP8hWARdtG7iTGKTst6RccxYS3YS82nmvMxneoq/image.png)Paragraph 2![](https://steemitimages.com/DQmRTtZFKEzGUCWyCEJ7jeyML9akAAGYW7c6pVB87NogZW1/image.png)Paragraph 3![](https://steemitimages.com/DQmapPpzLqGs2xAwnKSxzwzZUUqos8QAqATLiqCHdo4rfpq/image.png) After processing, the markdown looks like: 经过程序处理后的文件是这样的（所有的图片都自动保存到了本地，并自动更新了Markdown中的图片地址）： 1234567891011Paragraph 1![](/images/CFUUKPGDIGFPOTPV.png)Paragraph 2![](/images/PRMXOOVRLVXQRWNY.png)Paragraph 3![](/images/NIUUOYNTWZDFIWXO.png) The script is written in Ruby. As it is just a handy tool for myself, no exception handling in the code 程序是用Ruby写的，由于只是自用，就没有做任何的容错处理。这里和大家分享一下。 123456789101112131415161718192021222324252627282930require 'open-uri'if ARGV.length != 4 puts 'Usage: ruby backup.rb SOURCE_FILE TARGET_FILE WWW_ROOT RELATIVE_PATH' puts 'e.g. ruby backup.rb /tmp/gump.md /tmp/gump2.md /var/www/ images/' exitendurl_mappings = Hash.newsource_file = ARGV[0]target_file = ARGV[1]www_root = ARGV[2]relative_path = ARGV[3]s = IO.read(source_file)s.scan(/(!\\[.*?\\]\\()(.+?)(\\))/).each do |a,image_url,c| filename = (0...16).map &#123; (65 + rand(26)).chr &#125;.join + '.png' open(www_root + relative_path + filename, 'wb') do |file| file &lt;&lt; open(image_url).read end url_mappings[a+image_url+c] = a + '/' + relative_path + filename + cendurl_mappings.each do |old, new| s = s.gsub(old, new)endFile.open(target_file, 'w') &#123;|f| f.write(s) &#125; To run the script, type: 如果想要运行这个程序，只需要键入： 1ruby backup.rb /tmp/gump.md /tmp/gump2.md /var/www/ images/ The first parameter is the original markdown file nameThe second parameter is the new markdown file nameThe third parameter is the root path of your web serverThe fourth parameter is the relative path for the downloaded images 其中，第一个参数是你把markdown文本保存到本地的文件名第二个参数是程序进行图片下载并更新markdown图片链接后保存的文件名第三个参数是你的网站本地的根目录第四个参数是图片文件在网站中的相对目录","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"backup","slug":"backup","permalink":"https://cn.yuxifan.com/tags/backup/"}],"keywords":"Steemit文章备份"},{"title":"Steemsql系列教程二：查询发帖信息","slug":"steemsql-posts","date":"2017-08-25T05:40:12.000Z","updated":"2017-08-23T23:21:54.345Z","comments":true,"path":"steemsql-posts/","link":"","permalink":"https://cn.yuxifan.com/steemsql-posts/","excerpt":"","text":"前面介绍了如何查询帐户相关的信息，接下来看看和用户发帖相关的信息。 图片来源：Steemsql官网 查看表结构，看看里面都有什么字段： 1sp_columns Comments; 可以看到有很多有用的信息，比如author, title, permlink等等。 下面查一查我们cn区8月份帖子按照收入排序的前10名，显示它们的收入，获得投票数，作者，文章名，文章地址： 123456select top 10 pending_payout_value+total_payout_value as payout, net_votes, author, title, permlinkfrom Comments where category='cn' ANDcreated &gt;= '2017-08-01 00:00:00' ANDcreated &lt;= '2017-08-31 23:59:59'order by pending_payout_value+total_payout_value desc; 查询结果如下： 来看看我们cn区截至到目前为止最高产的作者：12345678select top 10 author, count(ID) as postsfrom Comments where parent_permlink='cn' ANDtitle != '' ANDcreated &gt;= '2017-08-01 00:00:00' ANDcreated &lt;= '2017-08-31 23:59:59'group by authororder by count(ID) desc; 查询结果如下： 按月统计一下cn区的文章数量： 1234567select MONTH(created) as month, count(ID) as postsfrom Comments where parent_permlink='cn' ANDtitle!='' ANDcreated &gt;= '2017-01-01 00:00:00' ANDcreated &lt;= '2017-08-31 23:59:59'group by MONTH(created) 查询结果如下： 可以看到，cn区自从6月份开始文章数量激增，这离不开各位Steemit好友的共同努力，加油！ 就先举这几个例子，如果有什么需要查询的欢迎在下面留言，我们一起讨论。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"Steemsql","slug":"Steemsql","permalink":"https://cn.yuxifan.com/tags/Steemsql/"},{"name":"posts","slug":"posts","permalink":"https://cn.yuxifan.com/tags/posts/"}],"keywords":"Steemsql系列教程二：查询发帖信息"},{"title":"Steemsql系列教程一：安装配置+账户篇","slug":"steemsql-client-account","date":"2017-08-23T05:40:12.000Z","updated":"2017-08-23T11:13:45.429Z","comments":true,"path":"steemsql-client-account/","link":"","permalink":"https://cn.yuxifan.com/steemsql-client-account/","excerpt":"","text":"最近在写一些有趣的Steem相关程序。尝试了一下Steemsql，感觉非常好用。就像 @jubi 曾经提到的一样，很多对IT技术不是很熟悉的朋友经常想要查询一些Steem的数据。因此就萌生了写一个教程的想法。这一系列教程主要是针对小白们的，欢迎大神们指正。 图片来源：Steemsql官网 安装数据库客户端工具(Install DBeaver)首先需要下载微软的SQL Server JDBC驱动程序，后面要用到。Download Microsoft SQL Server JDBC Driver from:https://www.microsoft.com/en-gb/download/details.aspx?id=11774 下载完毕后解开压缩包，会看到sqljdbc42.jar这个文件。Unzip the file and you will find sqljdbc42.jar: 接下来安装数据库客户端工具。这样的工具有很多，这里选择DBeaver作为示范：Download DBeaver:https://dbeaver.jkiss.org/download/ 安装完毕后，一看这个界面非常眼熟，一眼就认出来这肯定是在eclipse基础上进行的二次开发。。。 系统会要求你新建数据库连接。After installation, you will see this window asking you to create new connection: 输入以下信息：Enter the following information, e.g.Host: sql.steemsql.comDatabase/Schema: DBSteemUser name: steemitPassword: steemit 由于还没有安装Microsoft SQL Server JDBC驱动，因此系统会报错。If you haven’t installed Microsoft SQL Server JDBC Driver, as shown in the following diagram, just download it. 不要紧，添加前面下载好的驱动，再测试连接，应该就没什么问题了 Add the driver and test connection again, you will see: 运行一个测试的SQL语句：Run a test query: 查询账户相关信息查看表结构，看看里面都有什么数据： 1sp_columns Accounts; 看看威望值最高的20个牛人： 123select top 20 name, reputation, post_count, comment_count from Accountsorder by reputation desc; 不过这个reputation的值和我们所看到的似乎不太一样，其实这里需要转换一下就OK了： 1234select top 20 name, cast(log10(reputation)*9 - 56 as decimal(4,2)) as reputation, post_count, comment_count from Accounts where reputation&gt;0 order by reputation desc; 可以看到reputation值最高的各位大神们，@sweetssj 赫然也在其中。竟然有rep值超过78的存在！羽西还在为rep 60而努力努力努力。。。 查看一下Steem中的各位土豪，这里只以账户中的SBD为例，需要注意的是sbd_balance中包含’SBD’字符，需要先去掉，然后再转换为数字才能进行正确排序： 123select top 30 name, sbd_balance from Accounts order by CAST(REPLACE(sbd_balance, 'SBD', '') AS FLOAT) desc; 其实帐户表里面有用的信息还是很多的，这个大家自己去深挖吧。。。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"Steemsql","slug":"Steemsql","permalink":"https://cn.yuxifan.com/tags/Steemsql/"},{"name":"account","slug":"account","permalink":"https://cn.yuxifan.com/tags/account/"}],"keywords":"Steemsql系列教程一：安装配置+账户篇"},{"title":"Python Steem API介绍系列#5 － steempy命令行工具篇","slug":"python-steem-cli","date":"2017-08-12T05:40:12.000Z","updated":"2017-08-11T22:59:51.060Z","comments":true,"path":"python-steem-cli/","link":"","permalink":"https://cn.yuxifan.com/python-steem-cli/","excerpt":"","text":"今天来介绍一下Steem Python配套的命令行工具：steempy。有了这个工具，你不需要编程也能做很多事情了，比如：follow, upvote, transfer等操作。 检查你的安装如果你按照我前面的教程安装了Steem官方的Python库，那么就可以直接使用steempy了，否则，运行下面命令安装： 1pip3 install -U steem 然后运行一下这个命令，看看是否安装成功： 1steempy --version 也可以检查一下Steem区块的信息：1steempy info 也可以使用steempy查看某个账户的信息。最近听说 @tumutanzi 老兄被委以重任，SP大涨，这里查询一下： 1steempy balance tumutanzi 不过，真要顺便谢谢坛子兄的支持，啊啊，话说我也是因为喜欢你的博客才知道的Steemit。。。 导入账户信息像前面的操作不需要导入你的Steem账户信息也能查询，但是有的操作就不行了，比如转账，upvote等等。 运行下面命令来导入你的Steem账户： 1steempy importaccount yuxi 需要注意的是：第一个”Account Passphrase”指的是你的Steemit登陆用的密码。而第二个”Passphrase”则是以后用来访问你的本地加密钱包的密码。以后进行顶帖，转账等操作的时候都需要这个密码。首次操作时会要求输入新密码，必须输入两次确认才行。 运行下面命令检查一下当前账户信息： 1steempy listaccounts 这是命令运行结果： upvote,follow操作使用steempy进行upvote就非常简单了，比如：正好看到一个和我一样的Steemit新人 @ck-cake发了一个比较感兴趣的帖子，这里在命令行里顶一下： 12steempy upvote --account yuxi https://steemit.com/lovefriday/@ck-cake/lovefriday-brilliant-sea-view-in-phuketPassphrase: 系统会返回：1234567891011121314151617181920&#123; \"operations\": [ [ \"vote\", &#123; \"permlink\": \"lovefriday-brilliant-sea-view-in-phuket\", \"weight\": 10000, \"author\": \"ck-cake\", \"voter\": \"yuxi\" &#125; ] ], \"ref_block_num\": 59268, \"ref_block_prefix\": 2880245372, \"signatures\": [ \"XXXXXXXXXXXXXXXX\" ], \"extensions\": [], \"expiration\": \"2017-08-11T09:06:33\"&#125; 下面想要follow这个美女，运行： 1steempy follow ck-cake 看到了出错信息： 12345678Traceback (most recent call last): File \"/home/daren/environments/myenv/bin/steempy\", line 11, in &lt;module&gt; sys.exit(legacy()) File \"/home/daren/environments/myenv/lib/python3.5/site-packages/steem/cli.py\", line 1406, in legacy account=args.account File \"/home/daren/environments/myenv/lib/python3.5/site-packages/steem/commit.py\", line 1237, in follow raise ValueError(\"You need to provide an account\")ValueError: You need to provide an account 其实，是因为上面的命令没有输入账户信息所致。想想如果每次都还要输入账户岂不是很烦。幸运的时steempy可以让你设置一个默认账户，以后如果不指定的话，就使用默认账户进行操作。其实这也意味着你可以在steempy中添加多个账户。每次进行操作的时候可以指定一个账户。 运行以下命令指定默认账户： 1steempy set default_account yuxi 再来follow美女账户： 12steempy follow ck-cakePassphrase: 输入前面设置的钱包密码后成功follow。 转账相关操作使用steempy进行资金帐户相关的操作也是非常简单，比如：把一个SBD转换成STEEM: 12steempy convert 1Passphrase: 给别的帐户转帐： 1steempy transfer XXXX 0.01 SBD test-steempy https://steemit.com 首发。非常感谢阅读，欢迎Follow,Resteem和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#5 － steempy命令行工具篇"},{"title":"Python Steem API介绍系列#4 - 转账操作篇","slug":"python-steem-api-transfers","date":"2017-08-08T13:00:12.000Z","updated":"2017-08-08T12:48:07.470Z","comments":true,"path":"python-steem-api-transfers/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-transfers/","excerpt":"","text":"今天来说说如何使用Python API进行账户相关的操作。和帐户操作相关的方法都封装在了Commit这个类中，大家可以参考这个类的源代码。 进行转账操作要想进行转账操作，前面提到的POSTING key就不行了，这里需要获取另外一个key，也就是”Active key”，同样，点”Wallet” -&gt; ”Permissions”，就会看到Active key，不是系统默认显示的key，点“LOGIN TO SHOW”，登陆后就可以看到一个以数字5开头的密码了。 有了这个key，就可以进行转账操作了。下面首先来调戏一下booster这个机器人，它和randowhale类似，你转钱给它，它就会Upvote你。下面用前面发过的测试贴来验证一下booster的upvote是不是够给力。 12345678910from steem import Steemuser = 'yuxi'wif = &#123; \"active\": \"把你的Active key复制到这里\"&#125;steem = Steem(keys=wif)steem.transfer('booster', 1 , 'SBD', memo='https://steemit.com/test/@yuxi/python-api-test', account=user) 运行完毕后，查看一下，在我的history里面显示转账成功。 然后耐心的等了两个多小时，看到booser来upvote了我的帖子，因为只有它自己upvote，所以很清楚的看到它这一下upvote还挺给力，我付了1 SBD，这下upvote却带来了$1.62。 下面再来试试在Steem不同账号之间的转账，比如，把1 SBD转到自己的Saving账户中去： 1steem.transfer_to_savings(1, 'SBD', 'Python API test', account=user) 自动Redeem收入我不知道大家怎么看待Steemit的这个功能，每次有收入到账了，还需要自己点下这个按钮才能真正入账。我觉得应该在用户的profile中添加一个选项，类似“Redeem automatically”，让用户自己来设置是想手工claim还是想让系统自动claim。 Anyway，下面来看看如何使用Python API来自动claim那些到账的rewards。 123456789101112131415161718192021222324from steem import Steemfrom steem.account import Accountuser = 'yuxi'account = Account(user)wif = &#123; \"posting\": \"将你的POSTING key复制到这里\"&#125;try: steem = Steem(keys=wif) sbd = account.balances[\"rewards\"][\"SBD\"] steem = account.balances[\"rewards\"][\"STEEM\"] vests = account.balances[\"rewards\"][\"VESTS\"] if sbd &gt;0 or steem &gt;0 or vests &gt; 0: print('claiming rewards ... ') steem.claim_reward_balance(account=user) else: print('nothing to claim')except: print('oops, something not right.') 接下来就可以添加一个Cron job，比如：每天的凌晨1点让系统自动执行你的这个程序，从而省去了手工claim rewards的麻烦。 通过API进行交易的初步设想很多人都用过 blocktrades 的服务把SBD交易成比特币，在blocktrades的基本流程中，首先要根据你的交易信息，比如SBD -&gt; BTC以及你的比特币钱包地址来生成一个memo，然后再把交易金额转到 @blocktrades 并把memo字段填上前面获取的memo值。不知道有哪位大神用过 blocktrades.us的API，如何通过调用API来生成 memo？(How to get memo field value via blocktrades API? ) @oflyhigh @myfirst @blocktrades","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#4 - 转账操作篇"},{"title":"Python Steem API介绍系列#3 - 发帖回复点赞篇","slug":"python-steem-api-post-comment-upvote","date":"2017-08-04T19:00:12.000Z","updated":"2017-08-04T12:34:36.678Z","comments":true,"path":"python-steem-api-post-comment-upvote/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-post-comment-upvote/","excerpt":"","text":"下面来说说如何使用Python Steem API进行发帖，留言，以及给帖子点赞。 首先，和前面介绍的读取账户信息和读取已发帖子信息不同的是，这里必须要进行验证才能进行发帖等操作。 首先找到你的WIF登陆你的Steemit账户后，点”Wallet” -&gt; “Permissions”，你会看到”POSTING”下面对应了一串很长的密码，不是这个，再点下”SHOW PRIVATE KEY”，你会看到一个数字5开头的密码，这就是下面操作需要的密码了。下面的发帖，留言以及Upvote等操作只需要这个POSTING密码就够了。 创建Steem类对象123456from steem import Steemwif = &#123; \"posting\": \"复制你刚才看到的密码到这里\"&#125;steem = Steem(keys=wif) 发个测试帖子12p = steem.post(\"python API test\", \"test posting\", author='yuxi', tags=\"test\")print (p) 这里需要注意帖子不要乱发喔，建议只发送到测试标签”test”下，否则可能会被大鲸踩喔。。。 测试一下回复功能其实在Steem中，回复也是一个帖子，只不过比较特殊而已，回复没有标题。因此在进行回复的时候，也是用的post这个方法： 1p = steem.post(title='', body='test commenting', author='yuxi', reply_identifier='@yuxi/python-api-test') 这是测试完发帖和回复后的屏幕截图： 测试一下顶帖Upvote功能正好今天看到 @peterchen145 这篇文章不错，省了我手工顶了，直接在程序中实现： 1steem.vote('@peterchen145/yoyow-pressone', 100.00, 'yuxi') 当然你也可以撤销顶帖，把那个100.00换成负数，比如：-100.00，就会撤消你刚顶过的帖子。 关于这些API使用的一些想法除了上面介绍的三种功能之外，还有很多有意思的操作，比如：设定留言的回复功能，感觉可以通过这些API实现一个类似微信公共平台的自动回复功能。如果把这些功能组合起来，很容易写出一个自动顶帖，回复，甚至发帖的机器人来。 但是，任何好的技术都是双刃剑，关键看你是怎样来使用。我非常赞同 @tumutanzi 在一篇文章中所说的，要用心来写作，再高级的机器人也只能是冷冰冰的机器人，也许它永远无法懂得怎样去融入一个由一个个活生生的人组成的Steemit社区。 https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#3 - 发帖回复点赞篇"},{"title":"Python Steem API介绍系列#2 － 帖子读取篇","slug":"python-steem-api-read-post","date":"2017-08-01T19:00:12.000Z","updated":"2017-08-01T13:05:25.750Z","comments":true,"path":"python-steem-api-read-post/","link":"","permalink":"https://cn.yuxifan.com/python-steem-api-read-post/","excerpt":"","text":"今天来说说如何获取和帖子相关的信息，最后完成一个很实用的小程序，可以自动发送指定帐号的当日最新文章汇总到你的邮箱，可以设定为一个Cron job，这样就完全自动了。感觉Steem API越来越好玩了呢。。。 另外，根据@oflyhigh的建议，试了一下Steem官方Python API，感觉基本上和之前用的piston-lib一样，只是个别的类会有点不同。 # 安装官方Python库1pip3 install -U steem # 读取用户发帖信息这里主要用到了Blog和Post两个类。详细的方法列表请参考github上的源文件和官方文档。 首先，导入对应的Blog类： 12from steem.blog import Blogblog = Blog(\"yuxi\") 读取最新的两篇文章： 1print( blog.take(2) ) 读取文章相关的信息，比如：标题，创建时间，文章链接地址，文章分类，标签，获得的upvote数量，获得奖励／预计奖励等等 12345678910for p in blog.take(3): print(\"created: %s\" % p['created']) print(\"permlink: %s\" % p['permlink']) print(\"comments: %s\" % str(len(list(p.get_replies())))) print(\"url: %s\" % p['url']) print(\"categories: %s\" % str(p['category'])) print(\"tags: %s\" % str(p['tags'])) print(\"votes: %s\" % str(p['net_votes'])) print(\"reward: %s\" % str(p['total_payout_value'] + p['pending_payout_value'])) print() 获取某个用户的评论信息12comments = Blog(\"yuxi\", True)print (comments.take(2)) 自动发送感兴趣用户的当日最新帖子到指定邮箱其实有了上面的Blog和Post类，玩法就很多了，比如：可以让程序自动搜集指定用户的特定文章，再生成RSS feed放到一个web服务器上，这样就可以在RSS阅读器中阅读了，当然也可以设定一个Cron job，每天自动发送一条感兴趣文章的汇总。更多的玩法欢迎大家大开脑洞，在下面留言。 下面实现一下自动发送感兴趣作者的当日最新文章到指定邮箱，这里只列举了 @myfirst, @oflyhigh, @tumutanzi三位的每日文章。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import smtplibfrom email.mime.text import MIMETextfrom datetime import datetimefrom steem.blog import Blogusers = [\"myfirst\",\"oflyhigh\",”tumutanzi”]# 只检查最新3篇文章，再多了我就怀疑文章的质量了，当然也许有大牛能每天创作更多文章number_of_posts_to_check = 3host = 'https://steemit.com'content = ''for user in users: content += 'From ' + user + '&lt;br/&gt;' content += '------------------&lt;br/&gt;' posts = Blog(user) for p in posts.take(number_of_posts_to_check): p_date = p['created'] today = datetime.today().date() created_today = (p_date.date()==today) if created_today == True: content += '&lt;a href=\"' + host+p['url']+'\"&gt;' + p['title'] + \"&lt;/a&gt;&lt;br/&gt;\" content += ' Category: ' + str(p['category']) + \"&lt;br/&gt;\" content += ' Tags: ' + str(p['tags']) + \"&lt;br/&gt;\" content += ' Votes: ' + str(p['net_votes']) + \"&lt;br/&gt;\" content += ' Comments: ' + str(len(list(p.get_replies()))) + \"&lt;br/&gt;\" content += ' Rewards: ' + str(p['total_payout_value'] + p['pending_payout_value']) + \"&lt;br/&gt;\" content += '&lt;br/&gt;' content += '&lt;br/&gt;'fromaddr = '你的Gmail邮箱'toaddrs = '你的接收邮箱'subject = 'Daily posts: ' + datetime.today().strftime('%Y-%m-%d')message = MIMEText(content.encode('utf-8'), _subtype='html', _charset='utf-8')message['Subject'] = subjectusername = 'XXXXXXXX'password = 'XXXXX'server = smtplib.SMTP('smtp.gmail.com:587')server.ehlo()server.starttls()server.login(username,password)server.sendmail(fromaddr, toaddrs, message.as_string())server.quit() 这是我收到的email: https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API介绍系列#2 － 帖子读取篇"},{"title":"Python Steem API介绍系列#1 － 账户篇","slug":"python-steemit-api-account-management","date":"2017-07-31T05:40:12.000Z","updated":"2017-08-11T23:01:03.554Z","comments":true,"path":"python-steemit-api-account-management/","link":"","permalink":"https://cn.yuxifan.com/python-steemit-api-account-management/","excerpt":"","text":"在Account这个类中封装了各种账户相关的信息，下面介绍一下如何使用，同时也讨论一下一些重要的指标，比如声望值，投票力等，也许我对用户操作对这些值的影响的理解有偏差，希望各位大佬们多多指点。 如何使用Account类首先需要配置Python Steem的开发环境，然后只需要导入这个类就可以使用了： 12from piston.account import Accountaccount = Account(\"yuxi\") 至于这个类中有什么属性和方法，可以参考它的源代码 获取基本账户信息接下来就可以查看各种相关的账户信息了，比如： 获取用户名： 1print(\"Name: %s\" % account.name) 打印用户的profile，比如：用户名，自我介绍等。 1print(\"Profile: %s\" % account.profile) 查看余额: 1print(\"Balances: %s\" % account.balances) 查看用户最近Upvote的帖子： 1print(\"Account votes: %s\" % account.get_account_votes()) 这个指标里面有个weight，这个应该是和Steem Power有关的，值最大，投的票就越起作用，作者获得的奖励就越多。看了一下abit大神的投票，这个weight的值大的＊吓＊死＊人＊了＊ 1234&#123;'weight': 3590608, 'time': '2017-07-28T07:58:42', 'rshares': '35476665753831', 'authorperm': 'deanliu/steem-oh-the-eagle-flies-high', 'percent': 5000&#125;, &#123;'weight': 3350775, 'time': '2017-07-28T08:20:09', 'rshares': '17942256119450', 'authorperm': 'lingfei/5r552t', 'percent': 2500&#125;, &#123;'weight': 4038783, 'time': '2017-07-28T11:04:48', 'rshares': '49749730726633', 'authorperm': 'rea/a-queen-for-the-weekend-in-the-scottish-highlands-part-iii', 'percent': 7000&#125;, &#123;'weight': 5215056, 'time': '2017-07-28T12:03:54', 'rshares': '45672133202030', 'authorperm': 'someone/london---travel-with-me-6----susan-6-by-susanlo', 'percent': 6500&#125; 关于关注和粉丝看看你的粉丝还有你都关注了谁 1234followers = account.get_followers()following = account.get_following()print(\"Followers: %s\" % followers)print(\"Following: %s\" % following) 还可以利用Python的集合操作看看谁和你互粉了： 1print(\"Dual following: %s\" % list(set(followers).intersection(set(following)))) 关于投票力显示当前用户的投票力： 1print(\"Voting power: %s\" % account.voting_power()) 系统显示出我的投票力是: 1Voting power: 49.47 我接着做了一个实验，给一哥@myfirst这个帖子投了一票，结果我的投票力涨了： 1Voting power: 62.32 一哥的这个帖子写的也不错，再投一票。查看下投票力，竟然降了降了降了，我直接蒙圈了。。。 1Voting power: 61.19 再给O大神的这个帖子投了一票，投票力继续下降。 1Voting power: 59.98 问题来了：为什么第一次给一哥投票时投票力会涨，随后会一直降？Steem用户在投票的时候需要注意什么？ 关于声望值1print(\"Reputation: %s\" % account.rep) 这个声望值和你的Steem Power没有关系，和你在Steem中的行为有关，比如：发帖质量，参与讨论等有关。 先说到这里，欢迎大家批评指正。 https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"}],"keywords":"Python Steem API系列#1 － 账户篇"},{"title":"在Ubuntu 16中配置Python和Steem开发环境","slug":"setup-python-steem-development-environment-ubuntu16","date":"2017-07-30T05:40:12.000Z","updated":"2017-07-31T08:04:05.652Z","comments":true,"path":"setup-python-steem-development-environment-ubuntu16/","link":"","permalink":"https://cn.yuxifan.com/setup-python-steem-development-environment-ubuntu16/","excerpt":"","text":"安装Python 3在Ubuntu 16中Python 2和Python 3都是已经默认安装了，只需要更新一下系统，确保升级到最新版本： 12sudo apt-get updatesudo apt-get -y upgrade 验证一下Python版本 1python -v 还需要安装Python中的组件管理工具pip： 1sudo apt-get install -y python3-pip 安装基本的软件开发包： 1sudo apt-get install build-essential libffi-dev libssl-dev python3-dev 设定虚拟运行环境12345sudo apt-get install python3-venvmkdir environmentscd environmentspython3 -m venv myenvsource myenv/bin/activate 安装进行Steem开发需要的软件库123pip3 install wheel pip3 install piston-libpip3 install steem 测试一下下面写了一段小程序，实时输出最新发表文章采用的标签： 12345from piston import Steemsteem = Steem()for c in steem.stream_comments(): if c.is_main_post(): print (c.meta[\"tags\"]) https://steemit.com 首发。非常感谢阅读，欢迎FOLLOW和Upvote @yuxi 激励我创作更多更好的内容。","categories":[{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/categories/Steemit/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://cn.yuxifan.com/tags/Python/"},{"name":"Steem","slug":"Steem","permalink":"https://cn.yuxifan.com/tags/Steem/"},{"name":"Steemit","slug":"Steemit","permalink":"https://cn.yuxifan.com/tags/Steemit/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://cn.yuxifan.com/tags/Ubuntu/"}],"keywords":"Python和Steem开发环境"}]}